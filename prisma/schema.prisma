// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  image     String?
  emailVerified Boolean @default(false)
  phone     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  roleId    Int?
  role      Role?     @relation(fields: [roleId], references: [id], onDelete: SetNull)

  sessions  Session[]
  accounts  Account[]
  movements Movement[]

  @@map("user")
}

model Role {
  id          Int            @id @default(autoincrement())
  name        String         @unique
  description String?
  users       User[]
  permissions RolePermission[]

  @@map("role")
}

model Permission {
  id          Int            @id @default(autoincrement())
  name        String         @unique
  description String?
  roles       RolePermission[]

  @@map("permission")
}

model RolePermission {
  id           Int         @id @default(autoincrement())
  roleId       Int
  permissionId Int
  role         Role        @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission  @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permission")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Movement {
  id        String   @id @default(cuid())
  concept   String
  amount    Int
  date      DateTime
  userId    String
  type      MovementType
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@map("movement")
}

enum MovementType {
  INCOME
  EXPENSE
}
